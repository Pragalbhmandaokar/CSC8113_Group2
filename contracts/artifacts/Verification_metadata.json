{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_dataUsageSmartContractAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_agreementSmartContractAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_logSmartContractAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "getViolators",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "verifyCompliance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getViolators()": {
					"notice": "In the revised verifyCompliance function: 1 - It first fetches the keys for logs and consents. 2 - It iterates over the log keys and, within that loop, iterates over the consent keys to find matches. 3 - When a matching key is found, it performs the necessary verifications: - Checks if the consent is given and the actor's ID matches. - Compares the operations and processed personal data between the log and data usage entries. 4 - If any discrepancies are found, it flags the actor as a violator."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Verification.sol": "Verification"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/AccessControl.sol": {
			"keccak256": "0xdfdcf8b60f0514ab6840939fe3637ebe36764180a9563fb5587fc2f4a8d71935",
			"license": "MIT",
			"urls": [
				"bzz-raw://13d9fbbb25926ed11f3d043d2fc1c5ce98f264aeb330356a25cd86e3279fc43c",
				"dweb:/ipfs/QmQnGDgLmvzNrNTDGM5HpgNdDcqG8PBRdCBaQ8H7EwfmZn"
			]
		},
		"contracts/AgreementSmartContract.sol": {
			"keccak256": "0x3c30a3e62743629124636b5f8a3861804889f56eae967220c66a1a64653442c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://8271204b3ae49242a0fc1b20fbc70a3d2de20d4ad48bb281912d1d3eda06c62d",
				"dweb:/ipfs/QmUGTYMDscJPMKBn9URidenkifrGcJUwnyUQPyCM98wed2"
			]
		},
		"contracts/DataUsageSmartContract.sol": {
			"keccak256": "0x9939035cae21bd19c6bf441b56fc48575c4eb601062a00f936ae7ec6aa141036",
			"license": "MIT",
			"urls": [
				"bzz-raw://cd4dd9e749af221517930ba795f416c3584ba4966b9f7243a5b39054e9005b82",
				"dweb:/ipfs/Qmca461tXT9UitzM4zQZxhKQEqyN4c5ejowJrJNaANgf8z"
			]
		},
		"contracts/LogSmartContract.sol": {
			"keccak256": "0x921e32c1bb1b46bb6a9c30fe9011e49f5bb5edd21ecce5e1d9bf8d1ec622bced",
			"license": "MIT",
			"urls": [
				"bzz-raw://485099d3f82e3a01fe85960ed6bafbf877b3377822c583b37413817774f4d01b",
				"dweb:/ipfs/QmQSuuwBZvfD6pV8z7CRF3gtYSPkfppLzeNjjFtBb5ExUL"
			]
		},
		"contracts/Verification.sol": {
			"keccak256": "0x890461a0c8f4374dfc96ffdb4ae773feb85a35ed8e75f8e5e9b65d3d3dce21af",
			"license": "MIT",
			"urls": [
				"bzz-raw://174e19f42c16d588c80d81b6cd6cba78d919cdd490c81b1bfb7e43400c057fd9",
				"dweb:/ipfs/QmNQ7HjQ4DE85kKu4ZYc16nUZHeG8qJXuhdspUSTNQuz1G"
			]
		}
	},
	"version": 1
}